from Game import Game
import sounddevice as sd
import soundfile as sf
<<<<<<< HEAD
=======

>>>>>>> 2a3242f946e2f87988ca780fb70658e2dd193e02
import random

class AbsoluteHearingMode(Game):
    """
    A class used to create the logic of Absolute Game.

    Attributes:

    data (array): Contains all notes.
    arr (array): Get value in games's implementation.
    current_note (array): Get value in games's implementation.
    detected_note (array): The current note the user chose.
    failure_count (int): The number of mistakes the player can make up to game over×¥

    Methods:

    generate_random_note(self)
        Return generate random note from array of notes
    note_compare(self)
        Compare between the current note and the detected note and return True or False.
    sound_note(self, sound='')
        Play sound of file wav.
    """
    def __init__(self):
        # initialize game's class
        # super(AbsoluteHearing, self).__init__(self)
        Game.__init__(self)

        # Inserts into array only notes relevant.
        for i in self.data:
            if i["audio_file"] is not None:
                self.arr.append(i)

        self.noteamount = len(self.arr)
        self.failure_count = 10

    def generate_random_note(self):
        """
        Generate number in range 0, length of arr.

        Parameters:
        current_note (array): The generate note.
        randnum (int): Random number in range 0, length of arr.
        Returns:
            array:Index of the arr in the generate number.
        """
        randnum = random.randint(0, self.noteamount - 1)
        self.current_note = self.arr[randnum]
        print(self.arr[randnum])
        return self.arr[randnum]

    def note_compare(self):
        """
        Check if the name of the note that selected by the user is the same name of the note that generated by the
        program.
        The comparison does not refer to numbers in the names of the generated notes.

        Parameters:
        detected_note (array): The note selected by the user.
        current_note (array): The note generated by the program.

        Returns:
            Bool: True or False.
        """
        if self.detected_note.upper() in self.current_note["name"]:
            return True
        # User lost guessing attempt
        self.failure_count -= 1
        return False

    def sound_note(self, sound=''):
        """
        If sound_note receive sound it play it.
        else it plat the current_note.

        Parameters:
        filename (str): Path of sound's file.
        sound (str): Path of sound's file.
        current_note (array): The note generated by the program.
        """
        if sound:
            filename = sound
        else:
            filename = self.current_note["audio_file"]
        data, fs = sf.read(filename, dtype='float32')
        sd.play(data, fs)
<<<<<<< HEAD
        if filename == 'wav_files/correct.wav':
=======
        if filename == 'mp3/correct.wav':
>>>>>>> 2a3242f946e2f87988ca780fb70658e2dd193e02
            # Help to do little delay.
            sd.wait()  # Wait until sound has finished playing

